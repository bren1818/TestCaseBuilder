<?php
/*  Class Generated by Brendon Irwin's Class Generator

	Class: Steps

	File: Steps.php 

	Load Config String:

	{"mode":"form","keys":"%5B%7B%22name%22:%22step%22,%22label%22:%22Step%22,%22type%22:%22text%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%221%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:false,%22useQuery%22:false%7D,%7B%22name%22:%22regression%22,%22label%22:%22Full%20Regression%22,%22type%22:%22wysiwyg%22,%22required%22:true,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D,%7B%22name%22:%22result%22,%22label%22:%22Task%20and%20Expected%20Result%22,%22type%22:%22wysiwyg%22,%22required%22:true,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D,%7B%22name%22:%22pass%22,%22label%22:%22Pass%20/%20Fail%22,%22type%22:%22radioGroup%22,%22required%22:true,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22Passed,%2520Failed%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D%5D","classname":"steps","listBy":true,"getBy":true,"buildCRUD":"undefined","buildAjax":"undefined","defaultSize":"45"}

*/

	class Steps{
		private $id;
		private $connection;
		private $errors;
		private $errorCount;
		private $step;
		private $regression;
		private $result;
		private $pass;


		/*Constructor*/
		function __construct($databaseConnection=null){
			$this->connection = $databaseConnection;
		}

		/*Getters and Setters*/
		function getId(){
			return $this->id;
		}

		function setId($id){
			$this->id = $id;
		}

		function getConnection(){
			return $this->connection;
		}

		function setConnection($connection){
			$this->connection = $connection;
		}

		function getErrors(){
			return $this->errors;
		}

		function setErrors($errors){
			$this->errors = $errors;
		}

		function getErrorCount(){
			return $this->errorCount;
		}

		function setErrorCount($errorCount){
			$this->errorCount = $errorCount;
		}

		function getStep(){
			return $this->step;
		}

		function setStep($step){
			$this->step = $step;
		}

		function getRegression(){
			return $this->regression;
		}

		function setRegression($regression){
			$this->regression = $regression;
		}

		function getResult(){
			return $this->result;
		}

		function setResult($result){
			$this->result = $result;
		}

		function getPass(){
			return $this->pass;
		}

		function setPass($pass){
			$this->pass = $pass;
		}

		/*Special Functions*/
		function load($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						$steps = $query->fetchObject("steps");
					}
					if( is_object( $steps ) ){
						$steps->setConnection( $this->connection );
					}
					return $steps;
				}
			}
		}

		function getFromPost(){
			$this->setStep( (isset($_POST["step"])) ? $_POST["step"] : $this->getStep() );
			$this->setRegression( (isset($_POST["regression"])) ? $_POST["regression"] : $this->getRegression() );
			$this->setResult( (isset($_POST["result"])) ? $_POST["result"] : $this->getResult() );
			$this->setPass( (isset($_POST["pass"])) ? $_POST["pass"] : $this->getPass() );
		}

		function getFromRequest(){
			$this->setStep( (isset($_REQUEST["step"])) ? $_REQUEST["step"] : $this->getStep() );
			$this->setRegression( (isset($_REQUEST["regression"])) ? $_REQUEST["regression"] : $this->getRegression() );
			$this->setResult( (isset($_REQUEST["result"])) ? $_REQUEST["result"] : $this->getResult() );
			$this->setPass( (isset($_REQUEST["pass"])) ? $_REQUEST["pass"] : $this->getPass() );
		}

		function getFromArray($arr){
			$this->setStep( (isset($arr["step"])) ? $arr["step"] : $this->getStep() );
			$this->setRegression( (isset($arr["regression"])) ? $arr["regression"] : $this->getRegression() );
			$this->setResult( (isset($arr["result"])) ? $arr["result"] : $this->getResult() );
			$this->setPass( (isset($arr["pass"])) ? $arr["pass"] : $this->getPass() );
		}

		function compareTo($steps){
			$log = array();
			if($this->getId() != $steps->getId() ){
				$log["Id"] = "modified";
			}else{
				$log["Id"] = "un-modified";
			}
			if($this->getConnection() != $steps->getConnection() ){
				$log["Connection"] = "modified";
			}else{
				$log["Connection"] = "un-modified";
			}
			if($this->getErrors() != $steps->getErrors() ){
				$log["Errors"] = "modified";
			}else{
				$log["Errors"] = "un-modified";
			}
			if($this->getErrorCount() != $steps->getErrorCount() ){
				$log["ErrorCount"] = "modified";
			}else{
				$log["ErrorCount"] = "un-modified";
			}
			if($this->getStep() != $steps->getStep() ){
				$log["Step"] = "modified";
			}else{
				$log["Step"] = "un-modified";
			}
			if($this->getRegression() != $steps->getRegression() ){
				$log["Regression"] = "modified";
			}else{
				$log["Regression"] = "un-modified";
			}
			if($this->getResult() != $steps->getResult() ){
				$log["Result"] = "modified";
			}else{
				$log["Result"] = "un-modified";
			}
			if($this->getPass() != $steps->getPass() ){
				$log["Pass"] = "modified";
			}else{
				$log["Pass"] = "un-modified";
			}
		return $log;
		}

		function save(){
			$id = $this->getId();
			$step = $this->getStep();
			$regression = $this->getRegression();
			$result = $this->getResult();
			$pass = $this->getPass();
			if( $this->connection ){
				if( $id != "" ){
					/*Perform Update Operation*/
					$query = $this->connection->prepare("UPDATE  `steps` SET `step` = :step ,`regression` = :regression ,`result` = :result ,`pass` = :pass WHERE `id` = :id");
					$query->bindParam('step', $step);
					$query->bindParam('regression', $regression);
					$query->bindParam('result', $result);
					$query->bindParam('pass', $pass);
					$query->bindParam('id', $id);
					if( $query->execute() ){
						return $id;
					}else{
						return -1;
					}

				}else{
					/*Perform Insert Operation*/
					$query = $this->connection->prepare("INSERT INTO `steps` (`id`,`step`,`regression`,`result`,`pass`) VALUES (NULL,:step,:regression,:result,:pass);");
					$query->bindParam(':step', $step);
					$query->bindParam(':regression', $regression);
					$query->bindParam(':result', $result);
					$query->bindParam(':pass', $pass);

					if( $query->execute() ){
						$this->setId( $this->connection->lastInsertId() );
						return $this->getId();
					}else{
						return -1;
					}	
				}
			}
		}


		function delete($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("DELETE FROM `steps` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						return 1;
					}else{
						return 0;
					}
				}
			}
		}

		function getById($id){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `id` = :id LIMIT 1");
				$query->bindParam(':id', $id);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByStep($step){
			if( $this->connection ){
				if( $step == null && $this->getStep() != ""){
					$step = $this->getStep();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `step` = :step LIMIT 1");
				$query->bindParam(':step', $step);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByRegression($regression){
			if( $this->connection ){
				if( $regression == null && $this->getRegression() != ""){
					$regression = $this->getRegression();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `regression` = :regression LIMIT 1");
				$query->bindParam(':regression', $regression);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByResult($result){
			if( $this->connection ){
				if( $result == null && $this->getResult() != ""){
					$result = $this->getResult();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `result` = :result LIMIT 1");
				$query->bindParam(':result', $result);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByPass($pass){
			if( $this->connection ){
				if( $pass == null && $this->getPass() != ""){
					$pass = $this->getPass();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `pass` = :pass LIMIT 1");
				$query->bindParam(':pass', $pass);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}


		function getListById($id=null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `id` = :id");
				$query->bindParam(':id', $id);

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$stepss[] = $result;
					}
					if( is_array( $stepss ) ){
						return $stepss;
					}else{
						return array();
					}

				}
			}
		}

		function getListByStep($step=null){
			if( $this->connection ){
				if( $step == null && $this->getStep() != ""){
					$step = $this->getStep();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `step` = :step");
				$query->bindParam(':step', $step);

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$stepss[] = $result;
					}
					if( is_array( $stepss ) ){
						return $stepss;
					}else{
						return array();
					}

				}
			}
		}

		function getListByRegression($regression=null){
			if( $this->connection ){
				if( $regression == null && $this->getRegression() != ""){
					$regression = $this->getRegression();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `regression` = :regression");
				$query->bindParam(':regression', $regression);

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$stepss[] = $result;
					}
					if( is_array( $stepss ) ){
						return $stepss;
					}else{
						return array();
					}

				}
			}
		}

		function getListByResult($result=null){
			if( $this->connection ){
				if( $result == null && $this->getResult() != ""){
					$result = $this->getResult();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `result` = :result");
				$query->bindParam(':result', $result);

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$stepss[] = $result;
					}
					if( is_array( $stepss ) ){
						return $stepss;
					}else{
						return array();
					}

				}
			}
		}

		function getListByPass($pass=null){
			if( $this->connection ){
				if( $pass == null && $this->getPass() != ""){
					$pass = $this->getPass();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `steps` WHERE `pass` = :pass");
				$query->bindParam(':pass', $pass);

				if( $query->execute() ){
					while( $result = $query->fetchObject("steps") ){
						$stepss[] = $result;
					}
					if( is_array( $stepss ) ){
						return $stepss;
					}else{
						return array();
					}

				}
			}
		}

		/*Return parameter (object) as Array*/
		function toArray ($obj=null) {
			if (is_object($obj)) $obj = (array)$obj;
			if (is_array($obj)) {
				$new = array();
				foreach ($obj as $key => $val) {
					$class = get_class($this);
					$k = $key;
					$fkey = trim( str_replace( $class,"",$k));
					if( $fkey == "connection" || $fkey == "errors" || $fkey == "errorCount" ){
						//dont add
					}else{
						$new[$fkey] = $this->toArray($val);
					}
				}
			} else {
				$new = $obj;
			}
			return $new;
		}

		/*Return object as Array*/
		function asArray(){
			$array = $this->toArray( $this );
			return $array;
		}

		/*Return object as JSON String*/
		function asJSON(){
			return json_encode($this->asArray());
		}

		/*Return clone of Object*/
		function getClone(){
			return clone($this);
		}


		/*Echo array as CSV file*/
		function arrayToCSVFile($array, $filename="steps.csv", $delimiter=",", $showHeader=true){
			ob_clean();
			if( !is_array($array) ){
				$array = $this->asArray();
			}
			if( !is_array($showHeader) && $showHeader == true){
				$header=array();
				foreach( $array[0] as $key => $value){
					$header[] = strtoupper($key);
				}
				array_unshift($array, $header);
			}
			if( is_array($showHeader) ){
				array_unshift($array, $showHeader);
			}
			header('Content-Type: application/csv; charset=UTF-8');
			header('Content-Disposition: attachement; filename="'.$filename.'";');
			$f = fopen('php://output', 'w');
			foreach ($array as $line) {
				fputcsv($f, $line, $delimiter);
			}
			exit;
		}


		/*getObjectsLikeThis - returns array*/
		function getObjectsLikeThis($asArray=true){
			if( $this->connection ){
				$buildQuery="SELECT * FROM `steps` WHERE ";
				$numParams = 0;
				$values = array();
				foreach ($this as $key => $value) {
					if( $value != "" && $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
						$buildQuery.="`".$key."` = :value_".$numParams." AND ";
						$numParams++;
						$values[] = $value;
					}
				}
				if( $numParams > 0 ){
					//remove last AND
					$buildQuery = substr( $buildQuery , 0, (strlen($buildQuery) -4) );
					$query = $this->connection->PREPARE($buildQuery);
					for($i=0; $i < $numParams; $i++){
						$query->bindParam(":value_".$i, $values[$i]);
					}
					if( $query->execute() ){
						if( $asArray == true ){
							return $query->fetchAll(PDO::FETCH_ASSOC);
						}else{
							$objArray = array();
							while( $result = $query->fetchObject("steps") ){
								$object = $result;
								$objArray[] = $object;
							}
							return $objArray;
						}
					}
				}
			}
		}

		/*get properties*/
		function getObjectsProperties(){
			$properties = array();
			foreach ($this as $key => $value) {
				if( $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
					$properties[] = $key;
				}
			}
			return $properties;
		}
		/*Human readable print out of object*/
		function printFormatted($return=false){
			if($return){
				return '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}else{
				echo '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}
		}

	}
?>