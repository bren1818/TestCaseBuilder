<?php
/*  Class Generated by Brendon Irwin's Class Generator

	Class: Testresult

	File: Testresult.php 

	Load Config String:

	{"mode":"form","keys":"%5B%7B%22name%22:%22testID%22,%22label%22:%22Test%20ID%22,%22type%22:%22text%22,%22required%22:true,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D,%7B%22name%22:%22testName%22,%22label%22:%22Test%20Name%22,%22type%22:%22text%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:false%7D,%7B%22name%22:%22testNum%22,%22label%22:%22test%20Number%22,%22type%22:%22text%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:false%7D,%7B%22name%22:%22pass%22,%22label%22:%22Pass%20Count%22,%22type%22:%22text%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:false%7D,%7B%22name%22:%22fail%22,%22label%22:%22Fail%20Count%22,%22type%22:%22text%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:false%7D,%7B%22name%22:%22taker%22,%22label%22:%22Test%20Taker%22,%22type%22:%22text%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D,%7B%22name%22:%22html%22,%22label%22:%22HTML%22,%22type%22:%22textarea%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:false,%22useQuery%22:true%7D%5D","classname":"testResult","listBy":true,"getBy":true,"buildCRUD":"undefined","buildAjax":"undefined","defaultSize":"45"}

*/

	class Testresult{
		private $id;
		private $connection;
		private $errors;
		private $errorCount;
		private $testID;
		private $testName;
		private $testNum;
		private $pass;
		private $fail;
		private $taker;
		private $html;


		/*Constructor*/
		function __construct($databaseConnection=null){
			$this->connection = $databaseConnection;
		}

		/*Getters and Setters*/
		function getId(){
			return $this->id;
		}

		function setId($id){
			$this->id = $id;
		}

		function getConnection(){
			return $this->connection;
		}

		function setConnection($connection){
			$this->connection = $connection;
		}

		function getErrors(){
			return $this->errors;
		}

		function setErrors($errors){
			$this->errors = $errors;
		}

		function getErrorCount(){
			return $this->errorCount;
		}

		function setErrorCount($errorCount){
			$this->errorCount = $errorCount;
		}

		function getTestID(){
			return $this->testID;
		}

		function setTestID($testID){
			$this->testID = $testID;
		}

		function getTestName(){
			return $this->testName;
		}

		function setTestName($testName){
			$this->testName = $testName;
		}

		function getTestNum(){
			return $this->testNum;
		}

		function setTestNum($testNum){
			$this->testNum = $testNum;
		}

		function getPass(){
			return $this->pass;
		}

		function setPass($pass){
			$this->pass = $pass;
		}

		function getFail(){
			return $this->fail;
		}

		function setFail($fail){
			$this->fail = $fail;
		}

		function getTaker(){
			return $this->taker;
		}

		function setTaker($taker){
			$this->taker = $taker;
		}

		function getHtml(){
			return $this->html;
		}

		function setHtml($html){
			$this->html = $html;
		}

		/*Special Functions*/
		function load($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						$testresult = $query->fetchObject("testresult");
					}
					if( is_object( $testresult ) ){
						$testresult->setConnection( $this->connection );
					}
					return $testresult;
				}
			}
		}

		function getFromPost(){
			$this->setTestID( (isset($_POST["testID"])) ? $_POST["testID"] : $this->getTestID() );
			$this->setTestName( (isset($_POST["testName"])) ? $_POST["testName"] : $this->getTestName() );
			$this->setTestNum( (isset($_POST["testNum"])) ? $_POST["testNum"] : $this->getTestNum() );
			$this->setPass( (isset($_POST["pass"])) ? $_POST["pass"] : $this->getPass() );
			$this->setFail( (isset($_POST["fail"])) ? $_POST["fail"] : $this->getFail() );
			$this->setTaker( (isset($_POST["taker"])) ? $_POST["taker"] : $this->getTaker() );
			$this->setHtml( (isset($_POST["html"])) ? $_POST["html"] : $this->getHtml() );
		}

		function getFromRequest(){
			$this->setTestID( (isset($_REQUEST["testID"])) ? $_REQUEST["testID"] : $this->getTestID() );
			$this->setTestName( (isset($_REQUEST["testName"])) ? $_REQUEST["testName"] : $this->getTestName() );
			$this->setTestNum( (isset($_REQUEST["testNum"])) ? $_REQUEST["testNum"] : $this->getTestNum() );
			$this->setPass( (isset($_REQUEST["pass"])) ? $_REQUEST["pass"] : $this->getPass() );
			$this->setFail( (isset($_REQUEST["fail"])) ? $_REQUEST["fail"] : $this->getFail() );
			$this->setTaker( (isset($_REQUEST["taker"])) ? $_REQUEST["taker"] : $this->getTaker() );
			$this->setHtml( (isset($_REQUEST["html"])) ? $_REQUEST["html"] : $this->getHtml() );
		}

		function getFromArray($arr){
			$this->setTestID( (isset($arr["testID"])) ? $arr["testID"] : $this->getTestID() );
			$this->setTestName( (isset($arr["testName"])) ? $arr["testName"] : $this->getTestName() );
			$this->setTestNum( (isset($arr["testNum"])) ? $arr["testNum"] : $this->getTestNum() );
			$this->setPass( (isset($arr["pass"])) ? $arr["pass"] : $this->getPass() );
			$this->setFail( (isset($arr["fail"])) ? $arr["fail"] : $this->getFail() );
			$this->setTaker( (isset($arr["taker"])) ? $arr["taker"] : $this->getTaker() );
			$this->setHtml( (isset($arr["html"])) ? $arr["html"] : $this->getHtml() );
		}

		function compareTo($testresult){
			$log = array();
			if($this->getId() != $testresult->getId() ){
				$log["Id"] = "modified";
			}else{
				$log["Id"] = "un-modified";
			}
			if($this->getConnection() != $testresult->getConnection() ){
				$log["Connection"] = "modified";
			}else{
				$log["Connection"] = "un-modified";
			}
			if($this->getErrors() != $testresult->getErrors() ){
				$log["Errors"] = "modified";
			}else{
				$log["Errors"] = "un-modified";
			}
			if($this->getErrorCount() != $testresult->getErrorCount() ){
				$log["ErrorCount"] = "modified";
			}else{
				$log["ErrorCount"] = "un-modified";
			}
			if($this->getTestID() != $testresult->getTestID() ){
				$log["TestID"] = "modified";
			}else{
				$log["TestID"] = "un-modified";
			}
			if($this->getTestName() != $testresult->getTestName() ){
				$log["TestName"] = "modified";
			}else{
				$log["TestName"] = "un-modified";
			}
			if($this->getTestNum() != $testresult->getTestNum() ){
				$log["TestNum"] = "modified";
			}else{
				$log["TestNum"] = "un-modified";
			}
			if($this->getPass() != $testresult->getPass() ){
				$log["Pass"] = "modified";
			}else{
				$log["Pass"] = "un-modified";
			}
			if($this->getFail() != $testresult->getFail() ){
				$log["Fail"] = "modified";
			}else{
				$log["Fail"] = "un-modified";
			}
			if($this->getTaker() != $testresult->getTaker() ){
				$log["Taker"] = "modified";
			}else{
				$log["Taker"] = "un-modified";
			}
			if($this->getHtml() != $testresult->getHtml() ){
				$log["Html"] = "modified";
			}else{
				$log["Html"] = "un-modified";
			}
		return $log;
		}

		function save(){
			$id = $this->getId();
			$testID = $this->getTestID();
			$testName = $this->getTestName();
			$testNum = $this->getTestNum();
			$pass = $this->getPass();
			$fail = $this->getFail();
			$taker = $this->getTaker();
			$html = $this->getHtml();
			if( $this->connection ){
				if( $id != "" ){
					/*Perform Update Operation*/
					$query = $this->connection->prepare("UPDATE  `testresult` SET `testID` = :testID ,`testName` = :testName ,`testNum` = :testNum ,`pass` = :pass ,`fail` = :fail ,`taker` = :taker ,`html` = :html WHERE `id` = :id");
					$query->bindParam('testID', $testID);
					$query->bindParam('testName', $testName);
					$query->bindParam('testNum', $testNum);
					$query->bindParam('pass', $pass);
					$query->bindParam('fail', $fail);
					$query->bindParam('taker', $taker);
					$query->bindParam('html', $html);
					$query->bindParam('id', $id);
					if( $query->execute() ){
						return $id;
					}else{
						return -1;
					}

				}else{
					/*Perform Insert Operation*/
					$query = $this->connection->prepare("INSERT INTO `testresult` (`id`,`testID`,`testName`,`testNum`,`pass`,`fail`,`taker`,`html`) VALUES (NULL,:testID,:testName,:testNum,:pass,:fail,:taker,:html);");
					$query->bindParam(':testID', $testID);
					$query->bindParam(':testName', $testName);
					$query->bindParam(':testNum', $testNum);
					$query->bindParam(':pass', $pass);
					$query->bindParam(':fail', $fail);
					$query->bindParam(':taker', $taker);
					$query->bindParam(':html', $html);

					if( $query->execute() ){
						$this->setId( $this->connection->lastInsertId() );
						return $this->getId();
					}else{
						return -1;
					}	
				}
			}
		}


		function delete($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("DELETE FROM `testresult` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						return 1;
					}else{
						return 0;
					}
				}
			}
		}

		function getById($id){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `id` = :id LIMIT 1");
				$query->bindParam(':id', $id);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByTestID($testID){
			if( $this->connection ){
				if( $testID == null && $this->getTestID() != ""){
					$testID = $this->getTestID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `testID` = :testID LIMIT 1");
				$query->bindParam(':testID', $testID);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByTestName($testName){
			if( $this->connection ){
				if( $testName == null && $this->getTestName() != ""){
					$testName = $this->getTestName();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `testName` = :testName LIMIT 1");
				$query->bindParam(':testName', $testName);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByTestNum($testNum){
			if( $this->connection ){
				if( $testNum == null && $this->getTestNum() != ""){
					$testNum = $this->getTestNum();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `testNum` = :testNum LIMIT 1");
				$query->bindParam(':testNum', $testNum);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByPass($pass){
			if( $this->connection ){
				if( $pass == null && $this->getPass() != ""){
					$pass = $this->getPass();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `pass` = :pass LIMIT 1");
				$query->bindParam(':pass', $pass);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByFail($fail){
			if( $this->connection ){
				if( $fail == null && $this->getFail() != ""){
					$fail = $this->getFail();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `fail` = :fail LIMIT 1");
				$query->bindParam(':fail', $fail);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByTaker($taker){
			if( $this->connection ){
				if( $taker == null && $this->getTaker() != ""){
					$taker = $this->getTaker();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `taker` = :taker LIMIT 1");
				$query->bindParam(':taker', $taker);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByHtml($html){
			if( $this->connection ){
				if( $html == null && $this->getHtml() != ""){
					$html = $this->getHtml();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `html` = :html LIMIT 1");
				$query->bindParam(':html', $html);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}


		function getListById($id=null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `id` = :id");
				$query->bindParam(':id', $id);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$testresults[] = $result;
					}
					if( is_array( $testresults ) ){
						return $testresults;
					}else{
						return array();
					}

				}
			}
		}

		function getListByTestID($testID=null){
			if( $this->connection ){
				if( $testID == null && $this->getTestID() != ""){
					$testID = $this->getTestID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `testID` = :testID");
				$query->bindParam(':testID', $testID);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$testresults[] = $result;
					}
					if( is_array( $testresults ) ){
						return $testresults;
					}else{
						return array();
					}

				}
			}
		}

		function getListByTestName($testName=null){
			if( $this->connection ){
				if( $testName == null && $this->getTestName() != ""){
					$testName = $this->getTestName();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `testName` = :testName");
				$query->bindParam(':testName', $testName);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$testresults[] = $result;
					}
					if( is_array( $testresults ) ){
						return $testresults;
					}else{
						return array();
					}

				}
			}
		}

		function getListByTestNum($testNum=null){
			if( $this->connection ){
				if( $testNum == null && $this->getTestNum() != ""){
					$testNum = $this->getTestNum();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `testNum` = :testNum");
				$query->bindParam(':testNum', $testNum);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$testresults[] = $result;
					}
					if( is_array( $testresults ) ){
						return $testresults;
					}else{
						return array();
					}

				}
			}
		}

		function getListByPass($pass=null){
			if( $this->connection ){
				if( $pass == null && $this->getPass() != ""){
					$pass = $this->getPass();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `pass` = :pass");
				$query->bindParam(':pass', $pass);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$testresults[] = $result;
					}
					if( is_array( $testresults ) ){
						return $testresults;
					}else{
						return array();
					}

				}
			}
		}

		function getListByFail($fail=null){
			if( $this->connection ){
				if( $fail == null && $this->getFail() != ""){
					$fail = $this->getFail();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `fail` = :fail");
				$query->bindParam(':fail', $fail);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$testresults[] = $result;
					}
					if( is_array( $testresults ) ){
						return $testresults;
					}else{
						return array();
					}

				}
			}
		}

		function getListByTaker($taker=null){
			if( $this->connection ){
				if( $taker == null && $this->getTaker() != ""){
					$taker = $this->getTaker();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `taker` = :taker");
				$query->bindParam(':taker', $taker);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$testresults[] = $result;
					}
					if( is_array( $testresults ) ){
						return $testresults;
					}else{
						return array();
					}

				}
			}
		}

		function getListByHtml($html=null){
			if( $this->connection ){
				if( $html == null && $this->getHtml() != ""){
					$html = $this->getHtml();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testresult` WHERE `html` = :html");
				$query->bindParam(':html', $html);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testresult") ){
						$testresults[] = $result;
					}
					if( is_array( $testresults ) ){
						return $testresults;
					}else{
						return array();
					}

				}
			}
		}

		/*Return parameter (object) as Array*/
		function toArray ($obj=null) {
			if (is_object($obj)) $obj = (array)$obj;
			if (is_array($obj)) {
				$new = array();
				foreach ($obj as $key => $val) {
					$class = get_class($this);
					$k = $key;
					$fkey = trim( str_replace( $class,"",$k));
					if( $fkey == "connection" || $fkey == "errors" || $fkey == "errorCount" ){
						//dont add
					}else{
						$new[$fkey] = $this->toArray($val);
					}
				}
			} else {
				$new = $obj;
			}
			return $new;
		}

		/*Return object as Array*/
		function asArray(){
			$array = $this->toArray( $this );
			return $array;
		}

		/*Return object as JSON String*/
		function asJSON(){
			return json_encode($this->asArray());
		}

		/*Return clone of Object*/
		function getClone(){
			return clone($this);
		}


		/*Echo array as CSV file*/
		function arrayToCSVFile($array, $filename="testresult.csv", $delimiter=",", $showHeader=true){
			ob_clean();
			if( !is_array($array) ){
				$array = $this->asArray();
			}
			if( !is_array($showHeader) && $showHeader == true){
				$header=array();
				foreach( $array[0] as $key => $value){
					$header[] = strtoupper($key);
				}
				array_unshift($array, $header);
			}
			if( is_array($showHeader) ){
				array_unshift($array, $showHeader);
			}
			header('Content-Type: application/csv; charset=UTF-8');
			header('Content-Disposition: attachement; filename="'.$filename.'";');
			$f = fopen('php://output', 'w');
			foreach ($array as $line) {
				fputcsv($f, $line, $delimiter);
			}
			exit;
		}


		/*getObjectsLikeThis - returns array*/
		function getObjectsLikeThis($asArray=true){
			if( $this->connection ){
				$buildQuery="SELECT * FROM `testresult` WHERE ";
				$numParams = 0;
				$values = array();
				foreach ($this as $key => $value) {
					if( $value != "" && $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
						$buildQuery.="`".$key."` = :value_".$numParams." AND ";
						$numParams++;
						$values[] = $value;
					}
				}
				if( $numParams > 0 ){
					//remove last AND
					$buildQuery = substr( $buildQuery , 0, (strlen($buildQuery) -4) );
					$query = $this->connection->PREPARE($buildQuery);
					for($i=0; $i < $numParams; $i++){
						$query->bindParam(":value_".$i, $values[$i]);
					}
					if( $query->execute() ){
						if( $asArray == true ){
							return $query->fetchAll(PDO::FETCH_ASSOC);
						}else{
							$objArray = array();
							while( $result = $query->fetchObject("testresult") ){
								$object = $result;
								$objArray[] = $object;
							}
							return $objArray;
						}
					}
				}
			}
		}

		/*get properties*/
		function getObjectsProperties(){
			$properties = array();
			foreach ($this as $key => $value) {
				if( $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
					$properties[] = $key;
				}
			}
			return $properties;
		}
		/*Human readable print out of object*/
		function printFormatted($return=false){
			if($return){
				return '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}else{
				echo '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}
		}

	}
?>