<?php
/*  Class Generated by Brendon Irwin's Class Generator

	Class: Testcase

	File: Testcase.php 

	Load Config String:

	{"mode":"form","keys":"%5B%7B%22name%22:%22tid%22,%22label%22:%22Test%20Case%20ID%22,%22type%22:%22text%22,%22required%22:true,%22errText%22:%22%22,%22placeHolder%22:%22CS001%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D,%7B%22name%22:%22description%22,%22label%22:%22Description%22,%22type%22:%22wysiwyg%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D,%7B%22name%22:%22applicable%22,%22label%22:%22Applicable%20For%22,%22type%22:%22text%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D,%7B%22name%22:%22requirements%22,%22label%22:%22Requirements%22,%22type%22:%22text%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D,%7B%22name%22:%22steps%22,%22label%22:%22Steps%22,%22type%22:%22textarea%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:false,%22useQuery%22:false%7D,%7B%22name%22:%22comments%22,%22label%22:%22Comments%22,%22type%22:%22wysiwyg%22,%22required%22:false,%22errText%22:%22%22,%22placeHolder%22:%22%22,%22chkRestrictDates%22:false,%22startYr%22:%220%22,%22frmYr%22:%220%22,%22to%22:%220%22,%22restrictLength%22:false,%22min_length%22:%220%22,%22max_length%22:%2245%22,%22restrictAmount%22:false,%22min_amount%22:%220%22,%22max_amount%22:%220%22,%22listType%22:%22textarea%22,%22list%22:%22%22,%22pattern%22:%22undefined%22,%22listObjectName%22:%22%22,%22listObjectKeyFunction%22:%22%22,%22listObjectTitleFunction%22:%22%22,%22showAdmin%22:true,%22useQuery%22:true%7D%5D","classname":"testCase","listBy":true,"getBy":true,"buildCRUD":"undefined","buildAjax":"undefined","defaultSize":"45"}

*/

	class Testcase{
		private $id;
		private $connection;
		private $errors;
		private $errorCount;
		private $tid;
		private $description;
		private $applicable;
		private $requirements;
		private $steps;
		private $comments;


		/*Constructor*/
		function __construct($databaseConnection=null){
			$this->connection = $databaseConnection;
		}

		/*Getters and Setters*/
		function getId(){
			return $this->id;
		}

		function setId($id){
			$this->id = $id;
		}

		function getConnection(){
			return $this->connection;
		}

		function setConnection($connection){
			$this->connection = $connection;
		}

		function getErrors(){
			return $this->errors;
		}

		function setErrors($errors){
			$this->errors = $errors;
		}

		function getErrorCount(){
			return $this->errorCount;
		}

		function setErrorCount($errorCount){
			$this->errorCount = $errorCount;
		}

		function getTid(){
			return $this->tid;
		}

		function setTid($tid){
			$this->tid = $tid;
		}

		function getDescription(){
			return $this->description;
		}

		function setDescription($description){
			$this->description = $description;
		}

		function getApplicable(){
			return $this->applicable;
		}

		function setApplicable($applicable){
			$this->applicable = $applicable;
		}

		function getRequirements(){
			return $this->requirements;
		}

		function setRequirements($requirements){
			$this->requirements = $requirements;
		}

		function getSteps(){
			return $this->steps;
		}

		function setSteps($steps){
			$this->steps = $steps;
		}

		function getComments(){
			return $this->comments;
		}

		function setComments($comments){
			$this->comments = $comments;
		}

		/*Special Functions*/
		function load($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						$testcase = $query->fetchObject("testcase");
					}
					if( is_object( $testcase ) ){
						$testcase->setConnection( $this->connection );
					}
					return $testcase;
				}
			}
		}

		function getFromPost(){
			$this->setTid( (isset($_POST["tid"])) ? $_POST["tid"] : $this->getTid() );
			$this->setDescription( (isset($_POST["description"])) ? $_POST["description"] : $this->getDescription() );
			$this->setApplicable( (isset($_POST["applicable"])) ? $_POST["applicable"] : $this->getApplicable() );
			$this->setRequirements( (isset($_POST["requirements"])) ? $_POST["requirements"] : $this->getRequirements() );
			$this->setSteps( (isset($_POST["steps"])) ? $_POST["steps"] : $this->getSteps() );
			$this->setComments( (isset($_POST["comments"])) ? $_POST["comments"] : $this->getComments() );
		}

		function getFromRequest(){
			$this->setTid( (isset($_REQUEST["tid"])) ? $_REQUEST["tid"] : $this->getTid() );
			$this->setDescription( (isset($_REQUEST["description"])) ? $_REQUEST["description"] : $this->getDescription() );
			$this->setApplicable( (isset($_REQUEST["applicable"])) ? $_REQUEST["applicable"] : $this->getApplicable() );
			$this->setRequirements( (isset($_REQUEST["requirements"])) ? $_REQUEST["requirements"] : $this->getRequirements() );
			$this->setSteps( (isset($_REQUEST["steps"])) ? $_REQUEST["steps"] : $this->getSteps() );
			$this->setComments( (isset($_REQUEST["comments"])) ? $_REQUEST["comments"] : $this->getComments() );
		}

		function getFromArray($arr){
			$this->setTid( (isset($arr["tid"])) ? $arr["tid"] : $this->getTid() );
			$this->setDescription( (isset($arr["description"])) ? $arr["description"] : $this->getDescription() );
			$this->setApplicable( (isset($arr["applicable"])) ? $arr["applicable"] : $this->getApplicable() );
			$this->setRequirements( (isset($arr["requirements"])) ? $arr["requirements"] : $this->getRequirements() );
			$this->setSteps( (isset($arr["steps"])) ? $arr["steps"] : $this->getSteps() );
			$this->setComments( (isset($arr["comments"])) ? $arr["comments"] : $this->getComments() );
		}

		function compareTo($testcase){
			$log = array();
			if($this->getId() != $testcase->getId() ){
				$log["Id"] = "modified";
			}else{
				$log["Id"] = "un-modified";
			}
			if($this->getConnection() != $testcase->getConnection() ){
				$log["Connection"] = "modified";
			}else{
				$log["Connection"] = "un-modified";
			}
			if($this->getErrors() != $testcase->getErrors() ){
				$log["Errors"] = "modified";
			}else{
				$log["Errors"] = "un-modified";
			}
			if($this->getErrorCount() != $testcase->getErrorCount() ){
				$log["ErrorCount"] = "modified";
			}else{
				$log["ErrorCount"] = "un-modified";
			}
			if($this->getTid() != $testcase->getTid() ){
				$log["Tid"] = "modified";
			}else{
				$log["Tid"] = "un-modified";
			}
			if($this->getDescription() != $testcase->getDescription() ){
				$log["Description"] = "modified";
			}else{
				$log["Description"] = "un-modified";
			}
			if($this->getApplicable() != $testcase->getApplicable() ){
				$log["Applicable"] = "modified";
			}else{
				$log["Applicable"] = "un-modified";
			}
			if($this->getRequirements() != $testcase->getRequirements() ){
				$log["Requirements"] = "modified";
			}else{
				$log["Requirements"] = "un-modified";
			}
			if($this->getSteps() != $testcase->getSteps() ){
				$log["Steps"] = "modified";
			}else{
				$log["Steps"] = "un-modified";
			}
			if($this->getComments() != $testcase->getComments() ){
				$log["Comments"] = "modified";
			}else{
				$log["Comments"] = "un-modified";
			}
		return $log;
		}

		function save(){
			$id = $this->getId();
			$tid = $this->getTid();
			$description = $this->getDescription();
			$applicable = $this->getApplicable();
			$requirements = $this->getRequirements();
			$steps = $this->getSteps();
			$comments = $this->getComments();
			if( $this->connection ){
				if( $id != "" ){
					/*Perform Update Operation*/
					$query = $this->connection->prepare("UPDATE  `testcase` SET `tid` = :tid ,`description` = :description ,`applicable` = :applicable ,`requirements` = :requirements ,`steps` = :steps ,`comments` = :comments WHERE `id` = :id");
					$query->bindParam('tid', $tid);
					$query->bindParam('description', $description);
					$query->bindParam('applicable', $applicable);
					$query->bindParam('requirements', $requirements);
					$query->bindParam('steps', $steps);
					$query->bindParam('comments', $comments);
					$query->bindParam('id', $id);
					if( $query->execute() ){
						return $id;
					}else{
						return -1;
					}

				}else{
					/*Perform Insert Operation*/
					$query = $this->connection->prepare("INSERT INTO `testcase` (`id`,`tid`,`description`,`applicable`,`requirements`,`steps`,`comments`) VALUES (NULL,:tid,:description,:applicable,:requirements,:steps,:comments);");
					$query->bindParam(':tid', $tid);
					$query->bindParam(':description', $description);
					$query->bindParam(':applicable', $applicable);
					$query->bindParam(':requirements', $requirements);
					$query->bindParam(':steps', $steps);
					$query->bindParam(':comments', $comments);

					if( $query->execute() ){
						$this->setId( $this->connection->lastInsertId() );
						return $this->getId();
					}else{
						return -1;
					}	
				}
			}
		}


		function delete($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("DELETE FROM `testcase` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						return 1;
					}else{
						return 0;
					}
				}
			}
		}

		function getById($id){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `id` = :id LIMIT 1");
				$query->bindParam(':id', $id);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByTid($tid){
			if( $this->connection ){
				if( $tid == null && $this->getTid() != ""){
					$tid = $this->getTid();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `tid` = :tid LIMIT 1");
				$query->bindParam(':tid', $tid);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByDescription($description){
			if( $this->connection ){
				if( $description == null && $this->getDescription() != ""){
					$description = $this->getDescription();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `description` = :description LIMIT 1");
				$query->bindParam(':description', $description);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByApplicable($applicable){
			if( $this->connection ){
				if( $applicable == null && $this->getApplicable() != ""){
					$applicable = $this->getApplicable();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `applicable` = :applicable LIMIT 1");
				$query->bindParam(':applicable', $applicable);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByRequirements($requirements){
			if( $this->connection ){
				if( $requirements == null && $this->getRequirements() != ""){
					$requirements = $this->getRequirements();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `requirements` = :requirements LIMIT 1");
				$query->bindParam(':requirements', $requirements);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getBySteps($steps){
			if( $this->connection ){
				if( $steps == null && $this->getSteps() != ""){
					$steps = $this->getSteps();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `steps` = :steps LIMIT 1");
				$query->bindParam(':steps', $steps);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByComments($comments){
			if( $this->connection ){
				if( $comments == null && $this->getComments() != ""){
					$comments = $this->getComments();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `comments` = :comments LIMIT 1");
				$query->bindParam(':comments', $comments);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}


		function getListById($id=null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `id` = :id");
				$query->bindParam(':id', $id);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$testcases[] = $result;
					}
					if( is_array( $testcases ) ){
						return $testcases;
					}else{
						return array();
					}

				}
			}
		}

		function getListByTid($tid=null){
			if( $this->connection ){
				if( $tid == null && $this->getTid() != ""){
					$tid = $this->getTid();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `tid` = :tid");
				$query->bindParam(':tid', $tid);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$testcases[] = $result;
					}
					if( is_array( $testcases ) ){
						return $testcases;
					}else{
						return array();
					}

				}
			}
		}

		function getListByDescription($description=null){
			if( $this->connection ){
				if( $description == null && $this->getDescription() != ""){
					$description = $this->getDescription();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `description` = :description");
				$query->bindParam(':description', $description);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$testcases[] = $result;
					}
					if( is_array( $testcases ) ){
						return $testcases;
					}else{
						return array();
					}

				}
			}
		}

		function getListByApplicable($applicable=null){
			if( $this->connection ){
				if( $applicable == null && $this->getApplicable() != ""){
					$applicable = $this->getApplicable();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `applicable` = :applicable");
				$query->bindParam(':applicable', $applicable);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$testcases[] = $result;
					}
					if( is_array( $testcases ) ){
						return $testcases;
					}else{
						return array();
					}

				}
			}
		}

		function getListByRequirements($requirements=null){
			if( $this->connection ){
				if( $requirements == null && $this->getRequirements() != ""){
					$requirements = $this->getRequirements();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `requirements` = :requirements");
				$query->bindParam(':requirements', $requirements);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$testcases[] = $result;
					}
					if( is_array( $testcases ) ){
						return $testcases;
					}else{
						return array();
					}

				}
			}
		}

		function getListBySteps($steps=null){
			if( $this->connection ){
				if( $steps == null && $this->getSteps() != ""){
					$steps = $this->getSteps();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `steps` = :steps");
				$query->bindParam(':steps', $steps);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$testcases[] = $result;
					}
					if( is_array( $testcases ) ){
						return $testcases;
					}else{
						return array();
					}

				}
			}
		}

		function getListByComments($comments=null){
			if( $this->connection ){
				if( $comments == null && $this->getComments() != ""){
					$comments = $this->getComments();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `testcase` WHERE `comments` = :comments");
				$query->bindParam(':comments', $comments);

				if( $query->execute() ){
					while( $result = $query->fetchObject("testcase") ){
						$testcases[] = $result;
					}
					if( is_array( $testcases ) ){
						return $testcases;
					}else{
						return array();
					}

				}
			}
		}

		/*Return parameter (object) as Array*/
		function toArray ($obj=null) {
			if (is_object($obj)) $obj = (array)$obj;
			if (is_array($obj)) {
				$new = array();
				foreach ($obj as $key => $val) {
					$class = get_class($this);
					$k = $key;
					$fkey = trim( str_replace( $class,"",$k));
					if( $fkey == "connection" || $fkey == "errors" || $fkey == "errorCount" ){
						//dont add
					}else{
						$new[$fkey] = $this->toArray($val);
					}
				}
			} else {
				$new = $obj;
			}
			return $new;
		}

		/*Return object as Array*/
		function asArray(){
			$array = $this->toArray( $this );
			return $array;
		}

		/*Return object as JSON String*/
		function asJSON(){
			return json_encode($this->asArray());
		}

		/*Return clone of Object*/
		function getClone(){
			return clone($this);
		}


		/*Echo array as CSV file*/
		function arrayToCSVFile($array, $filename="testcase.csv", $delimiter=",", $showHeader=true){
			ob_clean();
			if( !is_array($array) ){
				$array = $this->asArray();
			}
			if( !is_array($showHeader) && $showHeader == true){
				$header=array();
				foreach( $array[0] as $key => $value){
					$header[] = strtoupper($key);
				}
				array_unshift($array, $header);
			}
			if( is_array($showHeader) ){
				array_unshift($array, $showHeader);
			}
			header('Content-Type: application/csv; charset=UTF-8');
			header('Content-Disposition: attachement; filename="'.$filename.'";');
			$f = fopen('php://output', 'w');
			foreach ($array as $line) {
				fputcsv($f, $line, $delimiter);
			}
			exit;
		}


		/*getObjectsLikeThis - returns array*/
		function getObjectsLikeThis($asArray=true){
			if( $this->connection ){
				$buildQuery="SELECT * FROM `testcase` WHERE ";
				$numParams = 0;
				$values = array();
				foreach ($this as $key => $value) {
					if( $value != "" && $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
						$buildQuery.="`".$key."` = :value_".$numParams." AND ";
						$numParams++;
						$values[] = $value;
					}
				}
				if( $numParams > 0 ){
					//remove last AND
					$buildQuery = substr( $buildQuery , 0, (strlen($buildQuery) -4) );
					$query = $this->connection->PREPARE($buildQuery);
					for($i=0; $i < $numParams; $i++){
						$query->bindParam(":value_".$i, $values[$i]);
					}
					if( $query->execute() ){
						if( $asArray == true ){
							return $query->fetchAll(PDO::FETCH_ASSOC);
						}else{
							$objArray = array();
							while( $result = $query->fetchObject("testcase") ){
								$object = $result;
								$objArray[] = $object;
							}
							return $objArray;
						}
					}
				}
			}
		}

		/*get properties*/
		function getObjectsProperties(){
			$properties = array();
			foreach ($this as $key => $value) {
				if( $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
					$properties[] = $key;
				}
			}
			return $properties;
		}
		/*Human readable print out of object*/
		function printFormatted($return=false){
			if($return){
				return '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}else{
				echo '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}
		}

	}
?>